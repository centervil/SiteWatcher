name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  frontend-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: frontend
        run: npm install

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './frontend/build'

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4

  diary-converter:
    runs-on: ubuntu-latest
    needs: frontend-deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Find latest diary file
        id: find-diary
        run: |
          # 最新の開発日記ファイルを検索
          LATEST_DIARY=$(find Documents/ProjectLogs -type f -name "*.md" | sort -r | head -n 1)
          
          # 出力ファイル名を生成
          DIARY_FILENAME=$(basename "$LATEST_DIARY")
          DATE_PART=$(echo "$DIARY_FILENAME" | grep -oP '\d{4}-\d{2}-\d{2}')
          
          # テーマ部分を抽出し、英数字のみに変換
          THEME_PART=$(echo "$DIARY_FILENAME" | sed "s/${DATE_PART}-//g" | sed "s/.md$//g")
          
          # 日本語を含むテーマをローマ字に変換
          if [[ "$THEME_PART" =~ [^\x00-\x7F] ]]; then
            # 日本語が含まれている場合、ローマ字に変換
            echo "日本語テーマをローマ字に変換します: $THEME_PART"
            
            # 日本語→ローマ字の簡易変換（よく使われるパターンのみ）
            ROMAJI_THEME=$(echo "$THEME_PART" | 
              sed 's/組み込み/kumikomi/g' | 
              sed 's/連携/renkei/g' | 
              sed 's/開発/kaihatsu/g' | 
              sed 's/改善/kaizen/g' | 
              sed 's/テンプレート/template/g' | 
              sed 's/設定/settei/g' | 
              sed 's/最適化/saitekika/g' | 
              sed 's/統合/tougou/g' | 
              sed 's/自動/jidou/g' | 
              sed 's/記録/kiroku/g' | 
              sed 's/公開/koukai/g' | 
              sed 's/日記/nikki/g' | 
              sed 's/変換/henkan/g' | 
              sed 's/ツール/tool/g' | 
              sed 's/[^a-zA-Z0-9_-]/-/g') # 残りの非英数字をハイフンに変換
            
            SLUG_THEME=$ROMAJI_THEME
          else
            # 既に英数字のみの場合はそのまま使用
            SLUG_THEME=$THEME_PART
          fi
          
          # Zennのslugルールに従って調整
          # 1. 大文字を小文字に変換
          SLUG_THEME=$(echo "$SLUG_THEME" | tr '[:upper:]' '[:lower:]')
          
          # 2. 先頭に日付を追加
          SLUG="${DATE_PART}-${SLUG_THEME}"
          
          # 3. 文字数をチェック（拡張子を除いて12〜50字）
          SLUG_LENGTH=${#SLUG}
          if [ $SLUG_LENGTH -lt 12 ]; then
            # 12文字未満の場合、接尾辞を追加
            ADDITIONAL_CHARS=$((12 - SLUG_LENGTH))
            SUFFIX="-zenn-article"
            SLUG="${SLUG}${SUFFIX}"
            echo "slugが短すぎるため接尾辞を追加: $SLUG"
          elif [ $SLUG_LENGTH -gt 50 ]; then
            # 50文字を超える場合、切り詰め
            SLUG="${SLUG:0:50}"
            echo "slugが長すぎるため切り詰め: $SLUG"
          fi
          
          # 最終的な出力ファイル名
          OUTPUT_FILENAME="${SLUG}.md"
          echo "Zennのslugルールに準拠したファイル名: $OUTPUT_FILENAME"
          
          echo "処理対象: $LATEST_DIARY"
          echo "出力ファイル: $OUTPUT_FILENAME"
          
          # articlesディレクトリが存在するか確認
          if [ ! -d "articles" ]; then
            echo "articlesディレクトリが存在しないため作成します"
            mkdir -p articles
          fi
          
          # 環境変数を設定
          echo "diary_file=$LATEST_DIARY" >> $GITHUB_OUTPUT
          echo "output_file=articles/$OUTPUT_FILENAME" >> $GITHUB_OUTPUT
          echo "GENERATED_ARTICLE_PATH=articles/$OUTPUT_FILENAME" >> $GITHUB_ENV
          echo "GENERATED_ARTICLE_FILENAME=$OUTPUT_FILENAME" >> $GITHUB_ENV

      - name: Run diary-converter
        uses: centervil/Diary-Converter@main
        with:
          source_file: ${{ steps.find-diary.outputs.diary_file }}
          destination_file: ${{ steps.find-diary.outputs.output_file }}
          api_key: ${{ secrets.GOOGLE_API_KEY }}
          model: gemini-2.0-flash-001
          template: Documents/zenn_template.md
          debug: 'true'

      - name: Prepare artifact
        run: |
          mkdir -p artifact
          if [ -f "${{ steps.find-diary.outputs.output_file }}" ]; then
            cp "${{ steps.find-diary.outputs.output_file }}" artifact/
            echo "ファイルをアーティファクトとして保存: ${{ steps.find-diary.outputs.output_file }}"
          else
            echo "警告: 生成されたファイルが見つかりません: ${{ steps.find-diary.outputs.output_file }}"
            exit 1
          fi

      - name: Upload article artifact
        uses: actions/upload-artifact@v4
        with:
          name: zenn-article
          path: artifact

  zenn-push:
    runs-on: ubuntu-latest
    needs: diary-converter
    steps:
      - name: Checkout Zenn repository
        uses: actions/checkout@v2
        with:
          repository: ${{ secrets.ZENN_REPO }}
          token: ${{ secrets.ZENN_REPO_TOKEN }}
          path: zenn-repo

      - name: Download article artifact
        uses: actions/download-artifact@v4
        with:
          name: zenn-article
          path: article

      - name: Copy article to Zenn repository
        run: |
          # Zennリポジトリのarticlesディレクトリの存在確認
          if [ ! -d "zenn-repo/articles" ]; then
            echo "zenn-repo/articles ディレクトリが存在しないため作成します"
            mkdir -p zenn-repo/articles
          fi
          
          # アーティファクトからファイルをコピー
          ARTICLE_FILE=$(find article -type f -name "*.md" | head -n 1)
          if [ -n "$ARTICLE_FILE" ]; then
            ARTICLE_FILENAME=$(basename "$ARTICLE_FILE")
            echo "記事ファイルを発見: $ARTICLE_FILENAME"
            cp "$ARTICLE_FILE" "zenn-repo/articles/$ARTICLE_FILENAME"
            echo "GENERATED_ARTICLE_FILENAME=$ARTICLE_FILENAME" >> $GITHUB_ENV
          else
            echo "エラー: 記事ファイルが見つかりません"
            exit 1
          fi
          
          # Zennリポジトリに移動
          cd zenn-repo
          
          # Gitの設定
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          # 変更をコミット
          git add articles/
          git commit -m "Add new article: $ARTICLE_FILENAME"
          
          # 変更をプッシュ
          git push

  backend-deploy:
    runs-on: ubuntu-latest
    needs: [frontend-deploy, diary-converter, zenn-push]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to AWS Lambda
        run: |
          zip -r function.zip .
          aws lambda update-function-code --function-name your-lambda-function-name --zip-file fileb://function.zip
