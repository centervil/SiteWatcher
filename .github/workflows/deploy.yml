name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  frontend-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: frontend
        run: npm install

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './frontend/build'

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4

  diary-converter:
    runs-on: ubuntu-latest
    needs: frontend-deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and run diary-converter
        working-directory: tools/diary-converter
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        run: |
          # 最新の開発日記ファイルを検索
          LATEST_DIARY=$(find ../../Documents/ProjectLogs -type f -name "*.md" | sort -r | head -n 1)
          
          # 出力ファイル名を生成
          DIARY_FILENAME=$(basename "$LATEST_DIARY")
          DATE_PART=$(echo "$DIARY_FILENAME" | grep -oP '\d{4}-\d{2}-\d{2}')
          THEME_PART=$(echo "$DIARY_FILENAME" | sed "s/${DATE_PART}-//g" | sed "s/.md$//g")
          OUTPUT_FILENAME="${DATE_PART}-${THEME_PART}.md"
          
          echo "処理対象: $LATEST_DIARY"
          echo "出力ファイル: $OUTPUT_FILENAME"
          
          # Dockerイメージをビルド
          docker build -t diary-converter .
          
          # コンテナを実行
          docker run --rm \
            -e GOOGLE_API_KEY=$GOOGLE_API_KEY \
            -v $(pwd)/../../Documents/ProjectLogs:/app/input \
            -v $(pwd)/../../articles:/app/output \
            diary-converter \
            "/app/input/$DIARY_FILENAME" \
            "/app/output/$OUTPUT_FILENAME" \
            --model gemini-2.0-flash-001

  backend-deploy:
    runs-on: ubuntu-latest
    needs: [frontend-deploy, diary-converter]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to AWS Lambda
        run: |
          zip -r function.zip .
          aws lambda update-function-code --function-name your-lambda-function-name --zip-file fileb://function.zip
